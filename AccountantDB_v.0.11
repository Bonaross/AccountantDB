-- BEFORE EXECUTING BELOW SCRIPT PLEASE CREATE NEW DATABASE NAMED AccountantDB --


use AccountantDB;
go

-- CREATING TABLES -- 

CREATE TABLE LAWYERS
	(
		ID			INT PRIMARY KEY	NOT NULL,
		NAME		NVARCHAR(50),
		SURNAME		NVARCHAR(50),
		SALARY		DECIMAL(10,2),
		HIREDATE	DATE NOT NULL,
		COMM		DECIMAL(10,2)
	);


CREATE TABLE DEPARTMENTS
	(
		ID_DEPARTMENTS	INT PRIMARY KEY NOT NULL,
		DEPT_NAME		NVARCHAR(255) NOT NULL,
		DEPT_MGR		INT
	);

CREATE TABLE INVOICES
	(
		ID_INVOICES	INT PRIMARY KEY NOT NULL,
		INV_NUMBER	NVARCHAR,
		INV_OWNER	INT,
		INV_PROJ_ID	INT,
		INV_NET_VAL	INT,
		INV_VAT		INT,
		INV_BRU_VAL	INT,
		INV_DATE	DATE,
		INV_PAYDAY	DATE
	);


CREATE TABLE PROJECTS
	(
		ID_PROJECTS		INT PRIMARY KEY NOT NULL,
		PROJ_NAME		NVARCHAR(255),
		PROJ_MGR		INT,
		PROJ_BUDGET		INT,
		PROJ_CLIENT_ID	INT,
		PROJ_DEPT_ID	INT,
		PROJ_START		DATE,
		PROJ_END		DATE
	);


CREATE TABLE LAWYERS_ARCH
	(
		ID_LAWYERS_ARCH	INT PRIMARY KEY	NOT NULL,
		NEW_NAME		NVARCHAR(50),
		NEW_SURNAME		NVARCHAR(50),
		NEW_SALARY		INT,
		NEW_HIREDATE	DATE, 
		OLD_NAME		NVARCHAR(50),
		OLD_SURNAME		NVARCHAR(50),
		OLD_SALARY		INT,
		OLD_HIREDATE	DATE,
		CHANGE_TIME		DATETIME	NOT NULL,
		OPERATION_TYPE	NVARCHAR(6) NOT NULL
	);


CREATE TABLE DEPARTMENTS_ARCH
	(
		ID_DEPARTMENTS_ARCH	INT PRIMARY KEY NOT NULL,
		NEW_DEPT_NAME		NVARCHAR(255) NOT NULL,
		NEW_DEPT_MGR		INT,
		OLD_DEPT_NAME		NVARCHAR(255) NOT NULL,
		OLD_DEPT_MGR		INT,
		CHANGE_TIME			DATETIME	NOT NULL,
		OPERATION_TYPE		NVARCHAR(6) NOT NULL
	);

CREATE TABLE INVOICES_ARCH
	(
		ID_INVOICES_ARCH	INT PRIMARY KEY NOT NULL,
		NEW_INV_NUMBER		NVARCHAR,
		NEW_INV_OWNER		INT,
		NEW_INV_NET_VAL		INT,
		NEW_INV_VAT			INT,
		NEW_INV_BRU_VAL		INT,
		NEW_INV_DATE		DATE,
		NEW_INV_PAYDAY		DATE,
		NEW_INV_PROJ_ID		INT,
		NEW_INV_TYPE		NVARCHAR(6),
		NEW_INV_CLIENT_ID	INT,
		NEW_INV_STATUS		NVARCHAR(7),
		OLD_INV_NUMBER		NVARCHAR,
		OLD_INV_OWNER		INT,
		OLD_INV_NET_VAL		INT,
		OLD_INV_VAT			INT,
		OLD_INV_BRU_VAL		INT,
		OLD_INV_DATE		DATE,
		OLD_INV_PAYDAY		DATE,
		OLD_INV_PROJ_ID		INT,
		OLD_INV_TYPE		NVARCHAR(6),
		OLD_INV_CLIENT_ID	INT,
		OLD_INV_STATUS		NVARCHAR(7),
		CHANGE_TIME			DATETIME	NOT NULL,
		OPERATION_TYPE		NVARCHAR(6) NOT NULL
	);



CREATE TABLE PROJECTS_ARCH
	(
		ID_PROJECTS_ARCH	INT PRIMARY KEY NOT NULL,
		NEW_PROJ_NAME		NVARCHAR(255),
		NEW_PROJ_MGR		INT,
		NEW_PROJ_BUDGET		INT,
		NEW_PROJ_CLIENT_ID	INT,
		NEW_PROJ_DEPT_ID	INT,
		NEW_PROJ_START		DATE,
		NEW_PROJ_END		DATE,
		OLD_PROJ_NAME		NVARCHAR(255),
		OLD_PROJ_MGR		INT,
		OLD_PROJ_BUDGET		INT,
		OLD_PROJ_CLIENT_ID	INT,
		OLD_PROJ_DEPT_ID	INT,
		OLD_PROJ_START		DATE,
		OLD_PROJ_END		DATE,
		CHANGE_TIME			DATETIME	NOT NULL,
		OPERATION_TYPE		NVARCHAR(6) NOT NULL
	);


CREATE TABLE CLIENTS
	(
		ID_CLIENTS	INT PRIMARY KEY	NOT NULL,
		CLIENT_NAME	NVARCHAR(50)
	);

CREATE TABLE CLIENTS_ARCH
	(
		ID_CLIENTS_ARCH		INT PRIMARY KEY	NOT NULL,
		NEW_CLIENT_NAME		NVARCHAR(50),
		OLD_CLIENT_NAME		NVARCHAR(50),
		CHANGE_TIME			DATETIME	NOT NULL,
		OPERATION_TYPE		NVARCHAR(6) NOT NULL
	);
go
-- ALTERING TABLES -- 

-- INVOICES---

ALTER TABLE INVOICES
ALTER COLUMN INV_BRU_VAL DECIMAL(10,2);
ALTER TABLE INVOICES
ALTER COLUMN INV_NET_VAL DECIMAL(10,2);
ALTER TABLE INVOICES
ALTER COLUMN INV_VAT DECIMAL(5,2);
go
---INVOICES_ARCH---

ALTER TABLE INVOICES_ARCH
ALTER COLUMN NEW_INV_BRU_VAL DECIMAL(10,2);
ALTER TABLE INVOICES_ARCH
ALTER COLUMN OLD_INV_BRU_VAL DECIMAL(10,2);

ALTER TABLE  INVOICES_ARCH
ALTER COLUMN NEW_INV_NET_VAL DECIMAL(10,2);
ALTER TABLE  INVOICES_ARCH
ALTER COLUMN OLD_INV_NET_VAL DECIMAL(10,2);

ALTER TABLE  INVOICES_ARCH
ALTER COLUMN NEW_INV_VAT DECIMAL(5,2);
ALTER TABLE  INVOICES_ARCH
ALTER COLUMN OLD_INV_VAT DECIMAL(5,2);
go

-- CONSTRAINTS -- 

---INVOICES---

ALTER TABLE INVOICES
ADD CONSTRAINT FK_INV_OWNER_ID FOREIGN KEY (INV_OWNER) REFERENCES LAWYERS(ID);
ALTER TABLE INVOICES
ADD CONSTRAINT FK_INV_PROJECT_ID FOREIGN KEY (INV_PROJ_ID) REFERENCES PROJECTS(ID_PROJECTS);
go

---DEPARTMENTS---

ALTER TABLE DEPARTMENTS
ADD CONSTRAINT FK_DEPT_MGR_ID FOREIGN KEY (DEPT_MGR) REFERENCES LAWYERS(ID);
go

---PROJECTS---

ALTER TABLE PROJECTS
ADD CONSTRAINT FK_PROJ_MGR_ID FOREIGN KEY (PROJ_MGR) REFERENCES LAWYERS(ID);
ALTER TABLE PROJECTS
ADD CONSTRAINT FK_PROJ_DEPT_ID FOREIGN KEY (PROJ_DEPT_ID) REFERENCES DEPARTMENTS(ID_DEPARTMENTS);
ALTER TABLE PROJECTS
ADD CONSTRAINT FK_PROJ_CLIENT_ID FOREIGN KEY (PROJ_CLIENT_ID) REFERENCES CLIENTS(ID_CLIENTS);
go


ALTER TABLE INVOICES
ADD CONSTRAINT unique_inv_number UNIQUE (INV_NUMBER);


-- CREATING SEQUENCES --

CREATE SEQUENCE lawyers_id_seq START WITH 1 INCREMENT BY 1 NO CACHE;
CREATE SEQUENCE dept_id_seq START WITH 1 INCREMENT BY 1 NO CACHE;
CREATE SEQUENCE projects_id_seq START WITH 1 INCREMENT BY 1 NO CACHE;
CREATE SEQUENCE invoices_id_seq START WITH 1 INCREMENT BY 1 NO CACHE;
CREATE SEQUENCE clients_id_seq START WITH 1 INCREMENT BY 1 NO CACHE;

CREATE SEQUENCE lawyers_arch_id_seq START WITH 1 INCREMENT BY 1 NO CACHE;
CREATE SEQUENCE dept_arch_id_seq START WITH 1 INCREMENT BY 1 NO CACHE;
CREATE SEQUENCE projects_arch_id_seq START WITH 1 INCREMENT BY 1 NO CACHE;
CREATE SEQUENCE invoices_arch_id_seq START WITH 1 INCREMENT BY 1 NO CACHE;
CREATE SEQUENCE clients_arch_id_seq START WITH 1 INCREMENT BY 1 NO CACHE;
go

-- CREATING PROCEDURES -- 


---LAWYERS---

CREATE OR ALTER PROCEDURE lawyers_comm_p1
@curr_comm DECIMAL(10,2),
@lawyer_id_comm INT,
@curr_net_val DECIMAL (10,2),
@curr_vat_val DECIMAL (10,2)
AS
BEGIN 
	SELECT @curr_comm = (SELECT COMM FROM LAWYERS WHERE LAWYERS.ID = @lawyer_id_comm)
	IF @curr_net_val IS NOT NULL
		UPDATE dbo.LAWYERS
		SET COMM = @curr_comm + (@curr_net_val * (1+@curr_vat_val/100) * 0.25);
	ELSE
		PRINT 'Invoice is not payed. Commision did not change';
END;
go

---INVOICES---

CREATE OR ALTER PROCEDURE invoices_bru_p1
@net_val_temp DECIMAL(10,2),
@vat_val_temp DECIMAL(5,2)
AS
BEGIN
DECLARE @vat DECIMAL(10,2);
SELECT @vat = 1+@vat_val_temp*0.01;

	UPDATE dbo.INVOICES
	SET invoices.INV_BRU_VAL = @net_val_temp * @vat
		WHERE invoices.ID_INVOICES = (SELECT current_value FROM sys.sequences
													WHERE [name] = 'invoices_id_seq');
												
END;
go

CREATE OR ALTER PROCEDURE invoices_payday_p2
@curr_date DATE,
@inv_number_temp NVARCHAR(50)
AS
BEGIN
	IF @curr_date IS NOT NULL
		UPDATE dbo.INVOICES
		SET invoices.INV_PAYDAY = DATEADD(day,30,@curr_date)
			WHERE invoices.INV_NUMBER = @inv_number_temp
	ELSE
		UPDATE dbo.INVOICES
		SET invoices.INV_PAYDAY = NULL
			WHERE invoices.INV_NUMBER = @inv_number_temp
END;
go


-- CREATING TRIGGERS --

---LAWYERS---

CREATE OR ALTER TRIGGER tr_iud_lawyers
ON dbo.LAWYERS
AFTER INSERT, UPDATE, DELETE
AS
DECLARE
		@OLD_NAME		NVARCHAR(50),
		@OLD_SURNAME	NVARCHAR(50),
		@OLD_SALARY		INT,
		@OLD_HIREDATE	DATE
		SELECT @OLD_NAME = d.NAME FROM deleted d;
		SELECT @OLD_SURNAME = d.SURNAME FROM deleted d;
		SELECT @OLD_SALARY = d.SALARY FROM deleted d;
		SELECT @OLD_HIREDATE = d.HIREDATE FROM deleted d;
BEGIN
	SET NOCOUNT ON;
	
	IF EXISTS (SELECT 0 FROM inserted)
		INSERT INTO LAWYERS_ARCH
		(
			ID_LAWYERS_ARCH	
			,NEW_NAME		
			,NEW_SURNAME		
			,NEW_SALARY		
			,NEW_HIREDATE	
			,OLD_NAME		
			,OLD_SURNAME		
			,OLD_SALARY		
			,OLD_HIREDATE	
			,CHANGE_TIME		
			,OPERATION_TYPE	
		)
		SELECT	
			NEXT VALUE FOR dbo.lawyers_arch_id_seq
			,	i.NAME
			,	i.SURNAME
			,	i.SALARY
			,	i.HIREDATE
			,	NULL 
			,	NULL
			,	NULL
			,	NULL
			,	SYSDATETIME()
			,	'INSERT'
		FROM inserted i
	ELSE 
		IF EXISTS (SELECT 0 FROM deleted)
		INSERT INTO LAWYERS_ARCH
		(
			ID_LAWYERS_ARCH	
			,NEW_NAME		
			,NEW_SURNAME		
			,NEW_SALARY		
			,NEW_HIREDATE	
			,OLD_NAME		
			,OLD_SURNAME		
			,OLD_SALARY		
			,OLD_HIREDATE	
			,CHANGE_TIME		
			,OPERATION_TYPE	
		)
		SELECT	
			NEXT VALUE FOR dbo.lawyers_arch_id_seq
			,	NULL
			,	NULL
			,	NULL
			,	NULL
			,	d.NAME
			,	d.SURNAME
			,	d.SALARY
			,	d.HIREDATE
			,	SYSDATETIME()
			,	'DELETE'
		FROM deleted d
	ELSE
		INSERT INTO LAWYERS_ARCH
		(
			ID_LAWYERS_ARCH	
			,NEW_NAME		
			,NEW_SURNAME		
			,NEW_SALARY		
			,NEW_HIREDATE	
			,OLD_NAME		
			,OLD_SURNAME		
			,OLD_SALARY		
			,OLD_HIREDATE	
			,CHANGE_TIME		
			,OPERATION_TYPE	
		)
		SELECT	
			NEXT VALUE FOR dbo.lawyers_arch_id_seq
			,	i.NAME
			,	i.SURNAME
			,	i.SALARY
			,	i.HIREDATE
			,	@OLD_NAME
			,	@OLD_SURNAME
			,	@OLD_SALARY
			,	@OLD_HIREDATE
			,	SYSDATETIME()
			,	'UPDATE'
		FROM inserted i	
END;
go

---PROJECTS---

CREATE OR ALTER TRIGGER tr_iud_projects
ON dbo.projects
AFTER INSERT, DELETE
AS
BEGIN
	SET NOCOUNT ON;
	
	IF EXISTS (SELECT 0 FROM inserted)
		INSERT INTO projects_ARCH
		(
			ID_projects_ARCH	
			,NEW_PROJ_NAME		
			,NEW_PROJ_MGR		
			,NEW_PROJ_BUDGET
			,NEW_PROJ_CLIENT_ID
			,NEW_PROJ_START
			,NEW_PROJ_END
			,OLD_PROJ_NAME	
			,OLD_PROJ_MGR
			,OLD_PROJ_BUDGET
			,OLD_PROJ_CLIENT_ID
			,OLD_PROJ_START
			,OLD_PROJ_END
			,CHANGE_TIME		
			,OPERATION_TYPE	
		)
		SELECT	
			NEXT VALUE FOR dbo.projects_arch_id_seq
			,	i.PROJ_NAME		
			,	i.PROJ_MGR		
			,	i.PROJ_BUDGET
			,	i.PROJ_CLIENT_ID
			,	i.PROJ_START
			,	i.PROJ_END
			,	NULL 
			,	NULL
			,	NULL
			,	NULL
			,	NULL
			,	NULL
			,	SYSDATETIME()
			,	'INSERT'
		FROM inserted i
	ELSE 
		IF EXISTS (SELECT 0 FROM deleted)
		INSERT INTO projects_ARCH
		(
			ID_projects_ARCH	
			,NEW_PROJ_NAME		
			,NEW_PROJ_MGR		
			,NEW_PROJ_BUDGET
			,NEW_PROJ_CLIENT_ID
			,NEW_PROJ_START
			,NEW_PROJ_END
			,OLD_PROJ_NAME	
			,OLD_PROJ_MGR
			,OLD_PROJ_BUDGET
			,OLD_PROJ_CLIENT_ID
			,OLD_PROJ_START
			,OLD_PROJ_END
			,CHANGE_TIME		
			,OPERATION_TYPE	
		)
		SELECT	
			NEXT VALUE FOR dbo.projects_arch_id_seq
			,	NULL
			,	NULL
			,	NULL
			,	NULL
			,	NULL
			,	NULL
			,	d.PROJ_NAME		
			,	d.PROJ_MGR		
			,	d.PROJ_BUDGET
			,	d.PROJ_CLIENT_ID
			,	d.PROJ_START
			,	d.PROJ_END
			,	SYSDATETIME()
			,	'DELETE'
		FROM deleted d
END;
go


---CLIENTS---

CREATE OR ALTER TRIGGER tr_iud_clients
ON dbo.clients
AFTER INSERT, DELETE
AS
BEGIN
	SET NOCOUNT ON;
	IF EXISTS (SELECT 0 FROM inserted)
		INSERT INTO CLIENTS_ARCH
		(
			ID_CLIENTS_ARCH	
			,NEW_CLIENT_NAME	
			,OLD_CLIENT_NAME				
			,CHANGE_TIME		
			,OPERATION_TYPE	
		)
		SELECT	
			NEXT VALUE FOR dbo.clients_arch_id_seq
			,	i.CLIENT_NAME	
			,	NULL
			,	SYSDATETIME()
			,	'INSERT'
		FROM inserted i
	ELSE 
		IF EXISTS (SELECT 0 FROM deleted)
		INSERT INTO CLIENTS_ARCH
		(
			ID_CLIENTS_ARCH	
			,NEW_CLIENT_NAME	
			,OLD_CLIENT_NAME				
			,CHANGE_TIME		
			,OPERATION_TYPE	
		)
		SELECT	
			NEXT VALUE FOR dbo.clients_arch_id_seq
			,	NULL
			,	d.CLIENT_NAME		
			,	SYSDATETIME()
			,	'DELETE'
		FROM deleted d
END;
go

---DEPARTMENTS---

CREATE OR ALTER TRIGGER tr_iud_depts
ON dbo.departments
AFTER INSERT, DELETE
AS
BEGIN
	SET NOCOUNT ON;
	IF EXISTS (SELECT 0 FROM inserted)
		INSERT INTO DEPARTMENTS_ARCH
		(
			ID_DEPARTMENTS_ARCH	
			,NEW_DEPT_NAME		
			,NEW_DEPT_MGR		
			,OLD_DEPT_NAME		
			,OLD_DEPT_MGR		
			,CHANGE_TIME		
			,OPERATION_TYPE	
		)
		SELECT	
			NEXT VALUE FOR dbo.depts_arch_id_seq
			,	i.DEPT_NAME		
			,	i.DEPT_MGR		
			,	NULL 
			,	NULL
			,	SYSDATETIME()
			,	'INSERT'
		FROM inserted i
	ELSE 
		IF EXISTS (SELECT 0 FROM deleted)
		INSERT INTO DEPARTMENTS_ARCH
		(
			ID_DEPARTMENTS_ARCH	
			,NEW_DEPT_NAME		
			,NEW_DEPT_MGR		
			,OLD_DEPT_NAME		
			,OLD_DEPT_MGR		
			,CHANGE_TIME		
			,OPERATION_TYPE	
		)
		SELECT	
			NEXT VALUE FOR dbo.depts_arch_id_seq
			,	NULL
			,	NULL
			,	d.DEPT_NAME		
			,	d.DEPT_MGR		
			,	SYSDATETIME()
			,	'DELETE'
		FROM deleted d
END;
go

---INVOICES---

CREATE OR ALTER TRIGGER tr_iud_invoices
ON dbo.invoices
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
	SET NOCOUNT ON;
	IF EXISTS (SELECT 0 FROM inserted)
		INSERT INTO INVOICES_ARCH
		(
				ID_INVOICES_ARCH	
			,	NEW_INV_NUMBER		
			,	NEW_INV_OWNER		
			,	NEW_INV_NET_VAL		
			,	NEW_INV_VAT			
			,	NEW_INV_BRU_VAL		
			,	NEW_INV_DATE		
			,	NEW_INV_PAYDAY		
			,	NEW_INV_PROJ_ID		
			,	NEW_INV_TYPE		
			,	NEW_INV_CLIENT_ID	
			,	NEW_INV_STATUS		
			,	OLD_INV_NUMBER		
			,	OLD_INV_OWNER			
			,	OLD_INV_NET_VAL		
			,	OLD_INV_VAT			
			,	OLD_INV_BRU_VAL		
			,	OLD_INV_DATE	
			,	OLD_INV_PAYDAY		
			,	OLD_INV_PROJ_ID		
			,	OLD_INV_TYPE		
			,	OLD_INV_CLIENT_ID	
			,	OLD_INV_STATUS		
			,	CHANGE_TIME			
			,	OPERATION_TYPE		
		)
		SELECT	
			NEXT VALUE FOR dbo.invoices_arch_id_seq
			,	i.INV_NUMBER		
			,	i.INV_OWNER		
			,	i.INV_NET_VAL		
			,	i.INV_VAT			
			,	i.INV_BRU_VAL		
			,	i.INV_DATE		
			,	i.INV_PAYDAY		
			,	i.INV_PROJ_ID		
			,	i.INV_TYPE		
			,	i.INV_CLIENT_ID	
			,	i.INV_STATUS		
			,	NULL
			,	NULL	
			,	NULL	
			,	NULL			
			,	NULL
			,	NULL
			,	NULL	
			,	NULL	
			,	NULL	
			,	NULL
			,	NULL	
			,	SYSDATETIME()
			,	'INSERT'
		FROM inserted i
	ELSE 
		IF EXISTS (SELECT 0 FROM deleted)
		INSERT INTO INVOICES_ARCH
		(
			ID_INVOICES_ARCH	
			,	NEW_INV_NUMBER		
			,	NEW_INV_OWNER			
			,	NEW_INV_NET_VAL		
			,	NEW_INV_VAT			
			,	NEW_INV_BRU_VAL		
			,	NEW_INV_DATE		
			,	NEW_INV_PAYDAY		
			,	NEW_INV_PROJ_ID		
			,	NEW_INV_TYPE		
			,	NEW_INV_CLIENT_ID	
			,	NEW_INV_STATUS		
			,	OLD_INV_NUMBER		
			,	OLD_INV_OWNER			
			,	OLD_INV_NET_VAL		
			,	OLD_INV_VAT			
			,	OLD_INV_BRU_VAL		
			,	OLD_INV_DATE	
			,	OLD_INV_PAYDAY		
			,	OLD_INV_PROJ_ID		
			,	OLD_INV_TYPE		
			,	OLD_INV_CLIENT_ID	
			,	OLD_INV_STATUS		
			,	CHANGE_TIME			
			,	OPERATION_TYPE		
		)
		SELECT	
			NEXT VALUE FOR dbo.depts_arch_id_seq
			ID_INVOICES_ARCH	
			,	NULL		
			,	NULL		
			,	NULL		
			,	NULL		
			,	NULL		
			,	NULL		
			,	NULL		
			,	NULL		
			,	NULL		
			,	NULL	
			,	NULL		
			,	d.INV_NUMBER		
			,	d.INV_OWNER			
			,	d.INV_NET_VAL		
			,	d.INV_VAT			
			,	d.INV_BRU_VAL		
			,	d.INV_DATE	
			,	d.INV_PAYDAY		
			,	d.INV_PROJ_ID		
			,	d.INV_TYPE		
			,	d.INV_CLIENT_ID	
			,	d.INV_STATUS		
			,	SYSDATETIME()
			,	'DELETE'		
		FROM deleted d;
END;
go

CREATE OR ALTER TRIGGER invoices_bru_t1
ON dbo.invoices
AFTER INSERT
AS
DECLARE  @tr_net_val_temp DECIMAL(10,2), @tr_vat_val_temp DECIMAL(5,2)
BEGIN
	SET NOCOUNT ON;
	SELECT @tr_net_val_temp = (SELECT INV_NET_VAL FROM INVOICES 
							WHERE ID_INVOICES = (SELECT current_value FROM sys.sequences
													WHERE [name] = 'invoices_id_seq')), 
		@tr_vat_val_temp = (SELECT INV_VAT FROM INVOICES 
							WHERE ID_INVOICES = (SELECT current_value FROM sys.sequences
													WHERE [name] = 'invoices_id_seq'));
	EXEC invoices_bru_p1 @tr_net_val_temp,@tr_vat_val_temp;
END;
go

CREATE OR ALTER TRIGGER invoices_payday_t2
ON dbo.invoices
AFTER INSERT, UPDATE
AS
BEGIN
DECLARE @curr_date_t2 DATE,
		@inv_number_temp NVARCHAR(50);
	SET NOCOUNT ON;
	SELECT @curr_date_t2 = (SELECT INV_DATE FROM INVOICES 
						WHERE ID_INVOICES = (SELECT current_value FROM sys.sequences
										WHERE [name] = 'invoices_id_seq'));
	SELECT @inv_number_temp = (SELECT INV_NUMBER FROM INVOICES 
						WHERE ID_INVOICES = (SELECT current_value FROM sys.sequences
										WHERE [name] = 'invoices_id_seq'));
	EXEC invoices_payday_p2 @curr_date_t2, @inv_number_temp ;
END;
go


-- INSERTING DATA --

INSERT INTO LAWYERS
(ID, NAME, SURNAME, SALARY, HIREDATE)
VALUES
(NEXT VALUE FOR lawyers_id_seq, 'Bożena', 'Pula', 9000, GETDATE()),
(NEXT VALUE FOR lawyers_id_seq, 'Ernest', 'Budka', 5000, GETDATE()),
(NEXT VALUE FOR lawyers_id_seq, 'Grzegorz', 'Orzechowski', 13000, GETDATE()),
(NEXT VALUE FOR lawyers_id_seq, 'Urszula', 'Wysocka', 10000, GETDATE());
go

INSERT INTO INVOICES
(ID_INVOICES, INV_NUMBER, INV_OWNER, INV_NET_VAL, INV_VAT, INV_DATE, INV_TYPE, INV_STATUS)
VALUES
(NEXT VALUE FOR dbo.invoices_id_seq, '1', 2, 788.00, 23.00, GETDATE(), 'COST', 'PENDING'),
(NEXT VALUE FOR dbo.invoices_id_seq, '2', 3, 14333.00, 23.00, GETDATE(), 'COST', 'PENDING'),
(NEXT VALUE FOR dbo.invoices_id_seq, '3', 3, 1233.98, 23.00, GETDATE(), 'INCOME', 'PENDING'),
(NEXT VALUE FOR dbo.invoices_id_seq, '4', 1, 1004.04, 23.00, GETDATE(), 'COST', 'PAYED');
go

INSERT INTO DEPARTMENTS
(ID_DEPARTMENTS, DEPT_NAME, DEPT_MGR)
VALUES
(NEXT VALUE FOR dbo.dept_id_seq, 'Environment', (SELECT LAWYERS.ID FROM dbo.LAWYERS WHERE LAWYERS.NAME = 'Ernest' AND LAWYERS.SURNAME = 'Budka')),
(NEXT VALUE FOR dbo.dept_id_seq, 'Civil Law', (SELECT LAWYERS.ID FROM dbo.LAWYERS WHERE (LAWYERS.NAME = 'Grzegorz' AND LAWYERS.SURNAME = 'Orzechowski'))),
(NEXT VALUE FOR dbo.dept_id_seq, 'Insurance', (SELECT LAWYERS.ID FROM dbo.LAWYERS WHERE (LAWYERS.NAME = 'Urszula' AND LAWYERS.SURNAME = 'Wysocka')));
go

INSERT INTO CLIENTS
(ID_CLIENTS,CLIENT_NAME)
VALUES
(NEXT VALUE FOR dbo.clients_id_seq, 'PETA' ),
(NEXT VALUE FOR dbo.clients_id_seq, 'Adidas' ),
(NEXT VALUE FOR dbo.clients_id_seq, 'Nike' ),
(NEXT VALUE FOR dbo.clients_id_seq, 'Disney' );
go

INSERT INTO PROJECTS
(ID_PROJECTS,PROJ_NAME, PROJ_MGR, PROJ_BUDGET, PROJ_CLIENT_ID, PROJ_DEPT_ID, PROJ_START, PROJ_END)
VALUES
(NEXT VALUE FOR dbo.projects_id_seq, 'Water Pollution', 1, 130000, 1,1, GETDATE(), DATEADD(year,1,GETDATE())),
(NEXT VALUE FOR dbo.projects_id_seq, 'Adidas Mobbing', 2, 80000, 2,2, GETDATE(), DATEADD(MONTH,7,GETDATE())),
(NEXT VALUE FOR dbo.projects_id_seq, 'Nike Insurence',3, 1000000, 3,3, '2022-01-02', DATEADD(MONTH, 3, '2022-01-02')),
(NEXT VALUE FOR dbo.projects_id_seq, 'Disney Dismissal', 2, 150000, 4,2, GETDATE(), DATEADD(MONTH,2,GETDATE()));
go


-- CREATING VIEWS ---

CREATE VIEW v1_LAWYERS_FULL_NAMES
AS 
SELECT LAWYERS.ID 'Lawyer ID' , CONCAT (LAWYERS.NAME, ' ', LAWYERS.SURNAME) AS 'Full Name' 
FROM LAWYERS;
go

CREATE VIEW v1_INVOICES_PAYMENT AS 
	SELECT 
		INVOICES.INV_OWNER							'Invoice Owner'
		, CONCAT(lawyers.NAME, ' ', lawyers.SURNAME) 'Full Name' 
		, invoices.INV_NET_VAL						'Net Value'
		, invoices.INV_VAT							'VAT Value'
		, invoices.INV_BRU_VAL						'Brutto Value'
		FROM INVOICES 
		INNER JOIN LAWYERS
		ON invoices.inv_owner = lawyers.id;
go

PRINT 'AccountantDB database was successfuly created.';
